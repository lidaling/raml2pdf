{
  "raml":"#%RAML 0.8\ntitle: Example\nversion: 1\nbaseUri: http://example.com/{version}\ndocumentation:\n  - title: Welcome\n    content: |\n      Welcome to the Example Documentation. The Example API allows you\n      to do stuff. See also [example.com](https://www.example.com).\n\n      ```javascript\n      var raml2html = require('raml2html');\n\n      // Using the default templates:\n      // source can either be a filename, file contents (string) or parsed RAML object\n      raml2html.parse(source, onSuccess, onError);\n\n      // Using your own templates:\n      // - config should be an object with at least an `template` property\n      // - config can also include `helpers` and `partials`\n      // - the config object will be accessible from your handlebars templates\n      raml2html.parseWithConfig(source, config, onSuccess, onError);\n      ```\n  - title: Chapter two\n    content: More content here. Including **bold** text!\n\nsecuritySchemes:\n  - oauth_1_0:\n      description: OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.\n      type: OAuth 1.0\n      settings:\n        requestTokenUri: https://api.dropbox.com/1/oauth/request_token\n        authorizationUri: https://www.dropbox.com/1/oauth/authorize\n        tokenCredentialsUri: https://api.dropbox.com/1/oauth/access_token\n\ntraits:\n  - paged:\n      queryParameters:\n        page_size:\n          description: The number of items per page\n          type: number\n        page:\n          description: The page to return\n          type: number\n\n/account:\n  displayName: ACCOUNTS\n\n  description: |\n    This is the top level description for /account.\n    * One\n    * Two\n    * Three\n\n  post:\n    description: |\n      Creates a new account. Some **bold** text here. More text. Need to fill the line, so make it longer still. Hooray!\n      Line two\n\n      Paragraph two\n    body:\n      application/json:\n        example: |\n          {\n            \"email\": \"john@example.com\",\n            \"password\": \"super_secret\",\n            \"name\": \"John Doe\"\n          }\n    responses:\n      200:\n        description: Account was created and user is now logged in\n\n  /find:\n    get:\n      description: find an account\n      queryParameters:\n        name:\n          description: name on account\n          required: true\n          example: Naruto Uzumaki\n        gender:\n          enum: [\"male\", \"female\"]\n        number:\n          type: integer\n  /{id}:\n    uriParameters:\n      id:\n        type: string\n        description: account identifier\n    get:\n      headers:\n        Authorization:\n          type: string\n          description: Basic authentication header\n          example: |\n            Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\n\n    put:\n      description: Update the account\n      body:\n        application/x-www-form-urlencoded:\n          formParameters:\n            name:\n              description: name on account\n              type: string\n              example: Naruto Uzumaki\n            gender:\n              enum: [\"male\", \"female\"]\n\n    delete:\n      description: Delete the account\n\n  /login:\n    post:\n      description: Login with email and password\n      body:\n        application/json:\n          example: |\n            {\n              \"email\": \"john@example.com\",\n              \"password\": \"super_secret\"\n            }\n      responses:\n        200:\n          description: Login was correct\n          body:\n            text/xml:\n              example: |\n                <test>This is a test</test>\n        400:\n          description: Login was incorrect, please try again\n        401:\n          description: Not authorized\n          headers:\n            WWW-Authenticate:\n              type: string\n              description: user was not authorized\n              example: |\n                WWW-Authenticate: Basic realm=\"raml2html\"\n\n  /forgot:\n    post:\n      description: Sends an email to the user with a link to set a new password\n      body:\n        application/json:\n          example: |\n            {\n              \"email\": \"john@example.com\"\n            }\n\n  /session:\n    get:\n      description: Gets the sessions\n\n    delete:\n      description: Deletes the session, logging out the user\n\n\n/forecasts:\n  displayName: Forecasts\n  description: The very top resource - displays OK\n  /{geoposition}:\n    description: Overview endpoint to assemble and access forecast data in various timely resolutions - THIS IS NOT DISPLAYED ANYWHERE WITH RAML2HTML :/\n    uriParameters:\n      geoposition:\n        description: A geoposition aquired by calling /geoposition/search - displays OK\n        type: string\n    get:\n      description: Provides an overview of the available data - display OK\n  /test:\n    description: No methods here, but it does have a description\n\n\n/conversations:\n  description: This is the top level description for /conversations.\n  securedBy: [oauth_1_0]\n\n  get:\n    description: Get a list of conversation for the current user\n\n  post:\n    description: Create a new conversions. The currently logged in user doesn't need to be supplied in the members list, it's implied.\n    body:\n      application/json:\n        example: |\n          {\n            \"content\": \"My message!\",\n            \"members\": [1, 2, 3]\n          }\n    responses:\n      200:\n        description: A conversation with these members already existed, the message was added to that one\n      201:\n        description: The conversation was created and the message added to it\n\n  /{convId}:\n    get:\n      description: Get a single conversation including its messages\n\n    put:\n      description: Update a conversation (change members)\n\n    /messages:\n      get:\n        is: [ paged ]\n        description: Get the messages for the conversation\n\n      post:\n        description: Add a new message to a conversation\n\n      /{messageId}:\n        put:\n          description: Update the message\n\n        delete:\n          description: Delete the message\n\n\n/users:\n  get:\n    is: [ paged ]\n    description: Get a list of all users\n\n  post:\n    description: Creates a new user\n    body:\n      application/json:\n        example: |\n          {\n            \"email\": \"john@example.com\",\n            \"name\": \"John Doe\",\n          }\n\n  /{userId}:\n    get:\n      description: Get the details of a user including a list of groups he belongs to\n\n    put:\n      description: Update a user\n\n    delete:\n      description: Deletes a user\n\n\n/groups:\n  get:\n    description: Get a list of all the groups\n\n  post:\n    description: Create a new group\n    body:\n      application/json:\n        example: |\n          {\n            \"name\": \"Cool people\",\n            \"members\": [1, 2, 3]\n          }\n\n  /{groupId}:\n    get:\n      description: Get the details of a group, including the member list\n\n    put:\n      description: Update the group, **optionally** supplying the new list of members (overwrites current list)\n      body:\n        application/json:\n          example: |\n            {\n              \"name\": \"Cool people\",\n              \"members\": [1, 2, 3]\n            }\n\n    delete:\n      description: Removes the group\n\n    /users:\n      post:\n        description: Adds a user to a group\n        body:\n          application/json:\n            example: |\n              {\n                \"user_id\": 4,\n              }\n\n      /{userId}:\n        delete:\n          description: Removes a user from a group\n"
}